// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package dataaccess

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email, 
    password_hash,
    role
) VALUES (
    $1, $2, $3
) RETURNING id, email, created_at
`

type CreateUserParams struct {
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	Role         pgtype.Text `json:"role"`
}

type CreateUserRow struct {
	ID        pgtype.UUID        `json:"id"`
	Email     string             `json:"email"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.PasswordHash, arg.Role)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT 
    id, 
    email, 
    password_hash, 
    is_active, 
    is_verified, 
    role,
    created_at,
    last_login
FROM users 
WHERE email = $1
AND is_active = true
LIMIT 1
`

type GetUserByEmailRow struct {
	ID           pgtype.UUID        `json:"id"`
	Email        string             `json:"email"`
	PasswordHash string             `json:"password_hash"`
	IsActive     pgtype.Bool        `json:"is_active"`
	IsVerified   pgtype.Bool        `json:"is_verified"`
	Role         pgtype.Text        `json:"role"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	LastLogin    pgtype.Timestamptz `json:"last_login"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.IsActive,
		&i.IsVerified,
		&i.Role,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT 
    id, 
    email, 
    is_active, 
    is_verified, 
    role,
    created_at,
    last_login
FROM users 
WHERE id = $1 
AND is_active = true
`

type GetUserByIDRow struct {
	ID         pgtype.UUID        `json:"id"`
	Email      string             `json:"email"`
	IsActive   pgtype.Bool        `json:"is_active"`
	IsVerified pgtype.Bool        `json:"is_verified"`
	Role       pgtype.Text        `json:"role"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	LastLogin  pgtype.Timestamptz `json:"last_login"`
}

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.IsActive,
		&i.IsVerified,
		&i.Role,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE users 
SET 
    last_login = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateLastLogin, id)
	return err
}
